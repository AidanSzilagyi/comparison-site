"""
Django settings for comparison project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import dj_database_url
import os
from django.urls import reverse

load_dotenv()

DEBUG = False
if os.environ.get('DEBUG') == 'TRUE':
    DEBUG = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get('SECRET_KEY')

ALLOWED_HOSTS = [
    "127.0.0.1",
    "comparison-site-49452db2da77.herokuapp.com"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'createList.apps.CreatelistConfig',
    'storages',
    'social_django',
    'mathfilters',
    'csp',
    #'allauth', # REMOVE
    #'allauth.account', # REMOVE
    #'allauth.socialaccount', # REMOVE
    #'allauth.socialaccount.providers.google', # REMOVE
]

MIDDLEWARE = [
    # 'allauth.account.middleware.AccountMiddleware', # REMOVE
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'createList.middleware.SaveURLBeforeAuthMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]
ROOT_URLCONF = 'comparison.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'createList.context_processors.profile',
            ],
        },
    },
]

WSGI_APPLICATION = 'comparison.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASE_URL = os.environ.get('DATABASE_URL')

#DATABASES = {
#    'default': dj_database_url.config(
#        default=DATABASE_URL, 
#        conn_max_age=600, 
#        ssl_require=True
#    )
#}
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        #conn_max_age=600,
        #ssl_require=True,
    )
}




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True

# Google OAuth

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('OAUTH_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('OAUTH_CLIENT_SECRET')

LOGIN_URL = '/auth/login/google-oauth2/'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/explore/'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/profile-check/'

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]
# Old OAuth

#AUTHENTICATION_BACKENDS = [
#    'django.contrib.auth.backends.ModelBackend',
#    'allauth.account.auth_backends.AuthenticationBackend',
#]

#SOCIALACCOUNT_PROVIDERS = {
#    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
#        'APP': {
#            'client_id': os.environ.get('OAUTH_CLIENT_ID'),
#            'secret': os.environ.get('OAUTH_CLIENT_SECRET'),
#            'key': ''
#        }
#    }
#}

# SOCIALACCOUNT_LOGIN_ON_GET = True
# LOGIN_REDIRECT_URL = '/home/'
# LOGOUT_REDIRECT_URL = 

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'head2head-comparison-site'
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_FILE_OVERWRITE = False

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": (
            "django.contrib.staticfiles.storage.StaticFilesStorage"
            if DEBUG else
            "storages.backends.s3boto3.S3StaticStorage"
        )
    }
}


if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SAMESITE = "Strict"
    SESSION_COOKIE_SAMESITE = "Strict"

    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    
    
from csp.constants import SELF, NONE, NONCE

# CONTENT_SECURITY_POLICY_REPORT_ONLY
CONTENT_SECURITY_POLICY = {
    "EXCLUDE_URL_PREFIXES": [
        # optional: list of URL prefixes for which CSP should not be applied
        # e.g. for some views or endpoints
    ],
    "DIRECTIVES": {
        # directive names follow CSP spec naming (lowercase, hyphen-separated)
        "default-src": [SELF],
        "script-src": [SELF, "https://head2head-comparison-site.s3.amazonaws.com", "https://apis.google.com", NONCE],
        "style-src": [SELF, "https://head2head-comparison-site.s3.amazonaws.com", "https://fonts.googleapis.com"],
        "font-src": [SELF, "https://fonts.gstatic.com"],
        "img-src": [SELF, "https://head2head-comparison-site.s3.amazonaws.com", "data:"],
        "connect-src": [SELF, "https://accounts.google.com", "https://www.googleapis.com"],
        "frame-src": [SELF, "https://accounts.google.com"],
        # optional: more CSP directives like frame-ancestors, form-action, media-src, etc. 
    },
}
